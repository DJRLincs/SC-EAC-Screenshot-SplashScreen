"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMDFileVerificationHeader = void 0;
const path_1 = require("path");
const promise_pool_1 = __importDefault(require("@supercharge/promise-pool"));
const constants_1 = require("./constants");
const hashStream_1 = require("./hashStream");
const Local = __importStar(require("../local"));
/**
 * Opens a file and passes the file handle to the callback
 *
 * @param path - Path to the file
 * @param callback - Callback to be called with the file handle
 * @returns - Promise with the result of the callback
 * @example - withFile('path/to/file', (fileHandle) => { ... }) // Promise
 */
const withFile = async (path, callback) => {
    const OPEN_FLAGS = 'r';
    const fileHandle = await Local.open(path, OPEN_FLAGS);
    try {
        return await callback(fileHandle);
    }
    finally {
        await fileHandle.close();
    }
};
/**
 * Creates a MDFileVerificationHeader for a file
 * @param options - Options for creating the header
 * @returns - Function that creates the header for a file path
 * @example - createMDFileVerificationHeader({ workers: 8, chunkSize: 1024 * 1024 })('path/to/file') // Promise
 */
function createMDFileVerificationHeader(options) {
    const { workers = constants_1.DEFAULT_HASHING_WORKERS, chunkSize = constants_1.DEFAULT_CHUNK_SIZE, algorithm = constants_1.DEFAULT_HASHING_ALGORITHM, } = options;
    return (path) => {
        return withFile(path, async (fileHandle) => {
            const stats = await Local.stat(fileHandle);
            const { size } = stats;
            const numberOfChunks = Math.ceil(size / chunkSize);
            const arrayOfChunks = Array.from({ length: numberOfChunks }, (_, i) => {
                const isLastChunk = i === numberOfChunks - 1;
                const start = chunkSize * i;
                const end = isLastChunk ? size : start + chunkSize;
                return [start, end];
            });
            const { results: hashes } = await promise_pool_1.default.withConcurrency(workers)
                .for(arrayOfChunks)
                .process(async ([start, end]) => {
                const stream = Local.createReadStreamFromRangePath([start, end], path);
                const hash = await (0, hashStream_1.hashStream)(algorithm)(stream);
                return hash;
            });
            return {
                file: { name: (0, path_1.basename)(path), size },
                chunks: { size: chunkSize, algorithm, hashes },
            };
        });
    };
}
exports.createMDFileVerificationHeader = createMDFileVerificationHeader;
//# sourceMappingURL=createVerificationHeader.js.map
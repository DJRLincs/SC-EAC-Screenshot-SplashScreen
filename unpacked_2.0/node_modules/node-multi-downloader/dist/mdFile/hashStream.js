"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hashStream = void 0;
const crypto_1 = require("crypto");
/**
 * Hash a stream using the given algorithm and return the hash as a string
 *
 * @param algorithm - Hashing algorithm to use (e.g. 'sha256')
 * @param stream - Stream to hash
 * @returns - Hash as a string (e.g. 'a1b2c3d4e5f6') or an error
 * @example - hashStream('sha256')(stream) // => 'a1b2c3d4e5f6'
 */
const hashStream = (algorithm) => (stream) => new Promise((resolve, reject) => {
    const hash = (0, crypto_1.createHash)(algorithm);
    stream.on('data', (data) => {
        if (Buffer.isBuffer(data) || data instanceof Uint8Array) {
            hash.update(data);
        }
        else {
            reject(new Error('Invalid data received'));
        }
    });
    stream.on('end', () => {
        resolve(hash.digest('hex'));
    });
    stream.on('error', (error) => {
        reject(error);
    });
});
exports.hashStream = hashStream;
//# sourceMappingURL=hashStream.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.close = void 0;
const mdFileInfo_1 = require("./mdFileInfo");
const Local = __importStar(require("../local"));
/**
 * Finalize the file by truncating it to the correct size
 *
 * @param file - MDFile instance
 * @returns - Promise
 */
async function finalize(file) {
    const { fileHandle, header } = file;
    return Local.truncate(fileHandle, header.size);
}
/**
 * Close the MDFile
 * @param file - MDFile instance
 * @returns - Promise
 */
async function close(file) {
    const { fileHandle, header, chunks, finished } = file;
    try {
        if (!finished) {
            await (0, mdFileInfo_1.writeMDFileInfo)(fileHandle, { header, chunks }, header.size);
        }
        else {
            await finalize(file);
        }
    }
    finally {
        await Local.close(fileHandle);
    }
}
exports.close = close;
//# sourceMappingURL=close.js.map
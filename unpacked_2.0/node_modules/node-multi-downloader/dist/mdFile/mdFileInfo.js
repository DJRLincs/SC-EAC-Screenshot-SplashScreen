"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readMDFileInfo = exports.writeMDFileInfo = void 0;
const constants_1 = require("./constants");
const errors_1 = require("./errors");
const Local = __importStar(require("../local"));
/**
 * Write MDFileInfo to the end of the file
 *
 * @param fileHandle - File handle to write to
 * @param fileInfo - MDFileInfo to write
 * @param position - Position to write the MDFileInfo
 * @returns - Number of bytes written
 * @throws - Error if the file is not open for writing
 * @example - writeMDFileInfo(fileHandle, fileInfo, 0)
 */
function writeMDFileInfo(fileHandle, fileInfo, position) {
    const buffer = Buffer.alloc(constants_1.MDFILE_INFO_CONTENT_SIZE, ' ');
    buffer.write(JSON.stringify(fileInfo));
    return Local.write(fileHandle, buffer, 0, buffer.length, position);
}
exports.writeMDFileInfo = writeMDFileInfo;
/**
 * Read MDFileInfo from the end of the file
 *
 * @param fileHandle - File handle to read from
 * @param options - Options to read the MDFileInfo
 * @returns - MDFileInfo
 * @throws - Error if the file is not open for reading
 * @example - readMDFileInfo(fileHandle, { url: new URL('https://example.com') })
 */
async function readMDFileInfo(fileHandle, options = {}) {
    try {
        const stats = await fileHandle.stat();
        const buffer = Buffer.alloc(constants_1.MDFILE_INFO_CONTENT_SIZE, ' ');
        const { buffer: readBuffer } = await fileHandle.read(buffer, 0, buffer.length, stats.size - constants_1.MDFILE_INFO_CONTENT_SIZE);
        const parsedData = JSON.parse(readBuffer.toString());
        const { header, chunks } = parsedData;
        const { url, ...rest } = options;
        return {
            header: { ...header, ...rest, url: url ? url.href : header.url },
            chunks,
        };
    }
    catch (error) {
        if (error instanceof SyntaxError) {
            throw new errors_1.InvalidMDFileHeader('Invalid MDFile header');
        }
        throw error;
    }
}
exports.readMDFileInfo = readMDFileInfo;
//# sourceMappingURL=mdFileInfo.js.map
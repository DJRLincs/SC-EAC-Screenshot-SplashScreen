"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.retrieveContent = exports.retrieveContentRange = exports.retrieveContentLength = exports.UnknownRemoteResourceError = exports.RemoteResourceIOError = exports.LengthNotAvailableError = void 0;
const stream_1 = require("stream");
const undici_1 = require("undici");
(0, undici_1.setGlobalDispatcher)(new undici_1.Agent({ connect: { timeout: 600000 }, factory: (origin) => new undici_1.Pool(origin, { connections: 128 }) }));
class RemoteResourceError extends Error {
    constructor(message, options) {
        super(message, options);
        this.name = this.constructor.name;
    }
}
class LengthNotAvailableError extends RemoteResourceError {
}
exports.LengthNotAvailableError = LengthNotAvailableError;
class RemoteResourceIOError extends RemoteResourceError {
}
exports.RemoteResourceIOError = RemoteResourceIOError;
class UnknownRemoteResourceError extends RemoteResourceError {
}
exports.UnknownRemoteResourceError = UnknownRemoteResourceError;
async function retrieveContentLength(url) {
    try {
        const { headers, statusCode } = await (0, undici_1.request)(url, { throwOnError: true, method: 'HEAD' });
        if (statusCode === 200) {
            if ('content-length' in headers) {
                return parseInt(headers['content-length'], 10);
            }
            throw new LengthNotAvailableError('Content length not available');
        }
        throw new UnknownRemoteResourceError(`HTTP request error with status code ${statusCode}`);
    }
    catch (error) {
        if (error instanceof RemoteResourceError) {
            throw error;
        }
        throw new UnknownRemoteResourceError('Unknown error', { cause: error });
    }
}
exports.retrieveContentLength = retrieveContentLength;
async function retrieveContentRange(url, range) {
    const headers = { Range: `bytes=${range[0]}-${range[1]}` };
    try {
        const { statusCode, body } = await (0, undici_1.request)(url, { headers });
        if (statusCode === 206) {
            return stream_1.Readable.from(body);
        }
        throw new UnknownRemoteResourceError(`HTTP request error with status code ${statusCode}`);
    }
    catch (error) {
        if (error instanceof RemoteResourceError) {
            throw error;
        }
        throw new UnknownRemoteResourceError('Unknown error', { cause: error });
    }
}
exports.retrieveContentRange = retrieveContentRange;
async function retrieveContent(url) {
    try {
        const { statusCode, body } = await (0, undici_1.request)(url, {
            method: 'GET',
        });
        if (statusCode === 200) {
            return stream_1.Readable.from(body);
        }
        throw new UnknownRemoteResourceError(`HTTP request error with status code ${statusCode}`);
    }
    catch (error) {
        if (error instanceof RemoteResourceError) {
            throw error;
        }
        throw new UnknownRemoteResourceError('Unknown error', { cause: error });
    }
}
exports.retrieveContent = retrieveContent;
//# sourceMappingURL=remote.js.map
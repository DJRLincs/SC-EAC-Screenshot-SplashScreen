"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
const utils_1 = require("../utils");
class RSIApiAuthentication {
    api;
    constructor(api) {
        this.api = api;
    }
    async captcha() {
        const base64Image = await this.api.callImage({
            endpoint: this.api.endpoints.SIGN_IN_CAPTCHA,
        });
        const captchaImage = `data:image/png;base64,${base64Image}`;
        return captchaImage;
    }
    async signIn({ username, password, captcha, remember = false, launcherVersion = '0.0.0-node-multi-downloader-cli', }) {
        try {
            const response = await this.api.call({
                endpoint: this.api.endpoints.SIGN_IN,
                payload: {
                    username,
                    password,
                    captcha,
                    remember,
                    launcherVersion,
                },
            });
            if (response.success) {
                const session = (0, utils_1.sessionMapper)(response.data);
                const privileged = (0, utils_1.privilegedMapper)(response.data);
                this.api.session = session;
                return {
                    code: response.code,
                    success: response.success,
                    msg: response.msg,
                    data: {
                        requiresMfa: false,
                        requiresCaptcha: false,
                        heapAccountId: response.data.account_id,
                        trackingMetricsId: response.data.tracking_metrics_id,
                        agreements: response.data.agreements,
                        session,
                        privileged,
                        displayname: response.data.displayname,
                        nickname: response.data.nickname,
                        avatar: response.data.avatar,
                    },
                };
            }
            throw (0, errors_1.rsiApiErrorFactory)(response);
        }
        catch (error) {
            if (error instanceof errors_1.RsiCaptchaRequiredError) {
                this.api.session = (0, utils_1.sessionMapper)(error.payload);
            }
            if (error instanceof errors_1.RsiMfaRequiredError) {
                this.api.session = (0, utils_1.sessionMapper)(error.payload);
                this.api.device = (0, utils_1.deviceMapper)(error.payload);
            }
            throw error;
        }
    }
    async signInMfa({ codeMfa, deviceName, duration, }) {
        const deviceType = 'computer';
        const response = await this.api.call({
            endpoint: this.api.endpoints.SIGN_IN_MULTISTEP,
            payload: {
                code: codeMfa,
                device_name: deviceName,
                duration,
                device_type: deviceType,
            },
        });
        if (response.success) {
            const session = (0, utils_1.sessionMapper)(response.data);
            const privileged = (0, utils_1.privilegedMapper)(response.data);
            this.api.session = session;
            return {
                code: response.code,
                success: response.success,
                msg: response.msg,
                data: {
                    requiresMfa: false,
                    requiresCaptcha: false,
                    heapAccountId: response.data.account_id,
                    trackingMetricsId: response.data.tracking_metrics_id,
                    agreements: response.data.agreements,
                    session,
                    privileged,
                    displayname: response.data.displayname,
                    nickname: response.data.nickname,
                    avatar: response.data.avatar,
                },
            };
        }
        throw (0, errors_1.rsiApiErrorFactory)(response);
    }
}
exports.default = RSIApiAuthentication;
//# sourceMappingURL=authentication.js.map
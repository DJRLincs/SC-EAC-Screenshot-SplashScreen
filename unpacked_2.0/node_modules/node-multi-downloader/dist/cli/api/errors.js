"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rsiApiErrorFactory = exports.RsiNoGamePackage = exports.RsiExpiredToken = exports.RsiAgreementsRequired = exports.RsiCaptchaInvalidError = exports.RsiCaptchaRequiredError = exports.RsiMaxLoginAttemptError = exports.RsiAuthenticationError = exports.RsiInvalidClaimsError = exports.RsiConnectivityError = exports.RsiAuthExpired = exports.RsiMfaCodeInvalidError = exports.RsiAuthWrongCredentialsError = exports.RsiMfaRequiredError = exports.RsiApiError = exports.Code = void 0;
/* eslint-disable max-classes-per-file */
exports.Code = {
    INVALID_CREDENTIALS: 'ErrWrongPassword_email',
    MFA_REQUIRED: 'ErrMultiStepRequired',
    MFA_CODE_INVALID: 'ErrMultiStepWrongCode',
    CONNECTIVITY: 'ErrConnectivity',
    NOT_AUTHENTICATED: 'ErrNotAuthenticated',
    INVALID_CLAIMS: 'ErrClaimsInvalid',
    UNKNOWN: 'ErrUnknown',
    MAX_LOGIN_ATTEMPT: 'ErrMaxThrottleLogin',
    AUTH_EXPIRED: 'ErrMultiStepExpired',
    CAPTCHA_REQUIRED: 'ErrCaptchaRequiredLauncher',
    CAPTCHA_INVALID: 'ErrInvalidChallengeCode',
    DEPRECATED_API: 'ErrDeprecatedApi',
    AGREEMENTS_REQUIRED: 'ErrAgreementsRequired',
    EXPIRED_TOKEN: 'ErrExpiredToken',
    NO_GAME_PACKAGE: 'ErrNoGamePackage',
    PERMISSION_DENIED: 'ErrPermissionDenied',
};
class RsiApiError extends Error {
    code;
    payload;
    constructor(message = 'Unknown Error', code = exports.Code.UNKNOWN, payload = null) {
        super(message);
        Object.setPrototypeOf(this, RsiApiError.prototype);
        this.code = code;
        this.payload = payload;
    }
}
exports.RsiApiError = RsiApiError;
class RsiMfaRequiredError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.MFA_REQUIRED, payload);
        Object.setPrototypeOf(this, RsiMfaRequiredError.prototype);
    }
}
exports.RsiMfaRequiredError = RsiMfaRequiredError;
class RsiAuthWrongCredentialsError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.INVALID_CREDENTIALS, payload);
        Object.setPrototypeOf(this, RsiAuthWrongCredentialsError.prototype);
    }
}
exports.RsiAuthWrongCredentialsError = RsiAuthWrongCredentialsError;
class RsiMfaCodeInvalidError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.MFA_CODE_INVALID, payload);
        Object.setPrototypeOf(this, RsiMfaCodeInvalidError.prototype);
    }
}
exports.RsiMfaCodeInvalidError = RsiMfaCodeInvalidError;
class RsiAuthExpired extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.AUTH_EXPIRED, payload);
        Object.setPrototypeOf(this, RsiAuthExpired.prototype);
    }
}
exports.RsiAuthExpired = RsiAuthExpired;
class RsiConnectivityError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.CONNECTIVITY, payload);
        Object.setPrototypeOf(this, RsiConnectivityError.prototype);
    }
}
exports.RsiConnectivityError = RsiConnectivityError;
class RsiInvalidClaimsError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.INVALID_CLAIMS, payload);
        Object.setPrototypeOf(this, RsiInvalidClaimsError.prototype);
    }
}
exports.RsiInvalidClaimsError = RsiInvalidClaimsError;
class RsiAuthenticationError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.NOT_AUTHENTICATED, payload);
        Object.setPrototypeOf(this, RsiAuthenticationError.prototype);
    }
}
exports.RsiAuthenticationError = RsiAuthenticationError;
class RsiMaxLoginAttemptError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.MAX_LOGIN_ATTEMPT, payload);
        Object.setPrototypeOf(this, RsiMaxLoginAttemptError.prototype);
    }
}
exports.RsiMaxLoginAttemptError = RsiMaxLoginAttemptError;
class RsiCaptchaRequiredError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.CAPTCHA_REQUIRED, payload);
        Object.setPrototypeOf(this, RsiCaptchaRequiredError.prototype);
    }
}
exports.RsiCaptchaRequiredError = RsiCaptchaRequiredError;
class RsiCaptchaInvalidError extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.CAPTCHA_INVALID, payload);
        Object.setPrototypeOf(this, RsiCaptchaInvalidError.prototype);
    }
}
exports.RsiCaptchaInvalidError = RsiCaptchaInvalidError;
class RsiAgreementsRequired extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.AGREEMENTS_REQUIRED, payload);
        Object.setPrototypeOf(this, RsiAgreementsRequired.prototype);
    }
}
exports.RsiAgreementsRequired = RsiAgreementsRequired;
class RsiExpiredToken extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.EXPIRED_TOKEN, payload);
        Object.setPrototypeOf(this, RsiExpiredToken.prototype);
    }
}
exports.RsiExpiredToken = RsiExpiredToken;
class RsiNoGamePackage extends RsiApiError {
    constructor(message, payload = null) {
        super(message, exports.Code.NO_GAME_PACKAGE, payload);
        Object.setPrototypeOf(this, RsiNoGamePackage.prototype);
    }
}
exports.RsiNoGamePackage = RsiNoGamePackage;
const rsiApiErrorFactory = (rsiApiResult) => {
    switch (rsiApiResult.code) {
        case exports.Code.NOT_AUTHENTICATED:
            return new RsiAuthenticationError('Not authenticated', rsiApiResult.data);
        case exports.Code.MAX_LOGIN_ATTEMPT:
            return new RsiMaxLoginAttemptError(rsiApiResult.msg, rsiApiResult.data);
        case exports.Code.INVALID_CLAIMS:
            return new RsiInvalidClaimsError('Invalid Claims', rsiApiResult.data);
        case exports.Code.MFA_REQUIRED:
            return new RsiMfaRequiredError('Authentication Requires MFA', rsiApiResult.data);
        case exports.Code.MFA_CODE_INVALID:
            return new RsiMfaCodeInvalidError(rsiApiResult.msg, rsiApiResult.data);
        case exports.Code.CAPTCHA_REQUIRED:
            return new RsiCaptchaRequiredError('Sign in failed. You may have entered the wrong credentials.', rsiApiResult.data);
        case exports.Code.INVALID_CREDENTIALS:
            return new RsiAuthWrongCredentialsError('Sign in failed. You may have entered the wrong credentials.', rsiApiResult.data);
        case exports.Code.CAPTCHA_INVALID:
            return new RsiCaptchaInvalidError('Captcha is invalid', rsiApiResult.data);
        case exports.Code.AUTH_EXPIRED:
            return new RsiAuthExpired('Your session has expired.  Please confirm your password again.', rsiApiResult.data);
        case exports.Code.AGREEMENTS_REQUIRED:
            return new RsiAgreementsRequired(rsiApiResult.msg, rsiApiResult.data);
        case exports.Code.EXPIRED_TOKEN:
            return new RsiExpiredToken(rsiApiResult.msg, rsiApiResult.data);
        case exports.Code.NO_GAME_PACKAGE:
            return new RsiNoGamePackage(rsiApiResult.msg, rsiApiResult.data);
        default:
            return new RsiApiError(rsiApiResult.msg, rsiApiResult.code, rsiApiResult.data);
    }
};
exports.rsiApiErrorFactory = rsiApiErrorFactory;
//# sourceMappingURL=errors.js.map
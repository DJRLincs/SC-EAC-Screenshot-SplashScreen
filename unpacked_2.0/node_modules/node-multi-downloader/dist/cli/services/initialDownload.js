"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
// Sample download function used in the Launcher
const child_process_1 = require("child_process");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const stream_1 = require("stream");
const index_1 = __importDefault(require("../../index"));
class InitialDownload {
    url;
    verificationFileURL;
    destinationDirectory;
    progressCallback;
    chunkSize;
    destinationP4kPath;
    finalP4kPath;
    isNewDownload;
    constructor(url, verificationFileURL, destinationDirectory, progressCallback) {
        this.url = url;
        this.verificationFileURL = verificationFileURL;
        this.destinationDirectory = destinationDirectory;
        this.progressCallback = progressCallback;
        this.chunkSize = 20 * 1024 * 1024;
        const initialP4kName = 'Data.p4k.part';
        this.destinationP4kPath = path_1.default.join(destinationDirectory, initialP4kName);
        this.finalP4kPath = path_1.default.join(destinationDirectory, 'Data.p4k');
        this.isNewDownload = !fs_1.default.existsSync(this.destinationP4kPath);
    }
    retrieveInitialDownloadVerificationFile = async (verificationFileUrl) => {
        if (!verificationFileUrl) {
            return Promise.resolve(null);
        }
        try {
            const stream = await Promise.race([
                index_1.default.retrieveContent(verificationFileUrl),
                new Promise((_, reject) => 
                // eslint-disable-next-line no-promise-executor-return
                setTimeout(() => reject(new Error('Could not retrieve the verification file within 5 seconds')), 5000)),
            ]);
            const isReadable = (s) => stream instanceof stream_1.Readable;
            if (!isReadable(stream)) {
                return Promise.resolve(null);
            }
            return new Promise((resolve, reject) => {
                let result = '';
                stream.on('data', (buffer) => {
                    result += buffer.toString();
                });
                stream.on('end', () => resolve(JSON.parse(result.trim())));
                stream.on('error', () => reject(Error(result)));
            });
        }
        catch (error) {
            return Promise.resolve(null);
        }
    };
    createInitialDownload = async () => {
        const verificationHeader = await this.retrieveInitialDownloadVerificationFile(this.verificationFileURL);
        const { size } = verificationHeader.file;
        if (verificationHeader && verificationHeader !== null) {
            console.log(`Verification header found for initial download: Filename: ${verificationHeader.file.name} FileSize: ${verificationHeader.file.size}`);
        }
        else {
            console.log('Verification header not found for initial download');
        }
        const defaultConfig = { chunkSize: this.chunkSize, noResize: true, concurrentDownloads: 8 };
        const config = { verificationHeader, ...defaultConfig };
        try {
            (0, child_process_1.execSync)(`FSUtil File CreateNew "${this.destinationP4kPath}" ${size}`);
            (0, child_process_1.execSync)(`FSUtil Sparse SetFlag "${this.destinationP4kPath}"`);
            (0, child_process_1.execSync)(`FSUtil Sparse SetRange "${this.destinationP4kPath}" 0 ${size}`);
        }
        catch (err) {
            if (fs_1.default.existsSync(this.destinationP4kPath)) {
                fs_1.default.unlinkSync(this.destinationP4kPath);
            }
            throw err;
        }
        return index_1.default.create(this.destinationP4kPath, this.url, config);
    };
}
exports.default = InitialDownload;
//# sourceMappingURL=initialDownload.js.map
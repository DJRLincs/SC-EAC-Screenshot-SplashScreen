#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-console */
const commander_1 = require("commander");
const Local = __importStar(require("../local"));
const mdFile_1 = require("../mdFile");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pkg = require('../../package.json');
/**
 * Create a verification header for an input file and write hashes to an output file
 * @example - mdfile create-verification-header ./input.zip ./output.json
 */
commander_1.program
    .version(pkg.version, '-v --version')
    .usage('[options] <input ...> <output ...>')
    .arguments('<input> <output>')
    .option('-a, --algorithm <algorithm>', 'Hashing algorithm')
    .option('-c, --chunksize <chunksize>', 'Size of the file chunks to hash', parseInt)
    .action(async (input, output, cmd) => {
    try {
        const { algorithm = mdFile_1.DEFAULT_HASHING_ALGORITHM, chunksize = mdFile_1.DEFAULT_CHUNK_SIZE } = cmd;
        const headerExec = (0, mdFile_1.createMDFileVerificationHeader)({
            algorithm,
            chunkSize: chunksize,
        });
        const header = await headerExec(input);
        await Local.writeFile(JSON.stringify(header), output);
        console.log('Operation completed successfully');
    }
    catch (error) {
        console.error({ error });
    }
})
    .parse(process.argv);
//# sourceMappingURL=mdfile-hasher.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readFile = exports.writeFile = exports.createReadStreamFromRangePath = exports.createReadStreamFromRange = exports.createReadStream = exports.truncate = exports.stat = exports.read = exports.write = exports.close = exports.open = exports.UnknownLocalResourceError = exports.LocalResourceIOError = exports.LocalResourceError = void 0;
const fs = __importStar(require("fs"));
const fsPromises = __importStar(require("fs/promises"));
class LocalResourceError extends Error {
    constructor(message, options) {
        super(message, options);
        this.name = this.constructor.name;
    }
}
exports.LocalResourceError = LocalResourceError;
class LocalResourceIOError extends LocalResourceError {
}
exports.LocalResourceIOError = LocalResourceIOError;
class UnknownLocalResourceError extends LocalResourceError {
}
exports.UnknownLocalResourceError = UnknownLocalResourceError;
async function open(path, flags) {
    try {
        return await fsPromises.open(path, flags);
    }
    catch (error) {
        throw new LocalResourceIOError('Error while opening file', { cause: error });
    }
}
exports.open = open;
async function close(fileHandle) {
    try {
        return await fileHandle.close();
    }
    catch (error) {
        throw new LocalResourceIOError('Error while closing file', { cause: error });
    }
}
exports.close = close;
async function write(fileHandle, buffer, offset, length, position) {
    try {
        const { bytesWritten } = await fileHandle.write(buffer, offset, length, position);
        return bytesWritten;
    }
    catch (error) {
        throw new LocalResourceIOError('Error while writing file', { cause: error });
    }
}
exports.write = write;
async function read(fileHandle, buffer, offset, length, position) {
    try {
        return await fileHandle.read(buffer, offset, length, position);
    }
    catch (error) {
        throw new LocalResourceIOError('Error while reading file', { cause: error });
    }
}
exports.read = read;
async function stat(fileHandle) {
    try {
        return await fileHandle.stat();
    }
    catch (error) {
        throw new LocalResourceIOError('Error while fstat file', { cause: error });
    }
}
exports.stat = stat;
async function truncate(fileHandle, length) {
    try {
        return await fileHandle.truncate(length);
    }
    catch (error) {
        throw new LocalResourceIOError('Error while truncating file', { cause: error });
    }
}
exports.truncate = truncate;
function createReadStream(fileHandle) {
    return fs.createReadStream('', { fd: fileHandle, autoClose: false });
}
exports.createReadStream = createReadStream;
function createReadStreamFromRange(range) {
    return (fileHandle) => {
        return fileHandle.createReadStream({
            start: range[0],
            end: range[1] - 1,
            autoClose: false,
        });
    };
}
exports.createReadStreamFromRange = createReadStreamFromRange;
function createReadStreamFromRangePath(range, path) {
    return fs.createReadStream(path, {
        autoClose: true,
        start: range[0],
        end: range[1] - 1,
    });
}
exports.createReadStreamFromRangePath = createReadStreamFromRangePath;
async function writeFile(content, path) {
    try {
        return await fsPromises.writeFile(path, content);
    }
    catch (error) {
        throw new LocalResourceIOError('Error while writing file', { cause: error });
    }
}
exports.writeFile = writeFile;
async function readFile(path) {
    try {
        const buffer = await fsPromises.readFile(path);
        return buffer.toString();
    }
    catch (error) {
        throw new LocalResourceIOError('Error while reading file', { cause: error });
    }
}
exports.readFile = readFile;
//# sourceMappingURL=local.js.map
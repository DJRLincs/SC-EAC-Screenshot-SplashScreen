"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TIMEOUT_DURATION = void 0;
const stream_1 = require("stream");
const downloadStatisticsReporterStream_1 = __importDefault(require("./downloadStatisticsReporterStream"));
exports.TIMEOUT_DURATION = 250;
class DownloadStatisticsStream extends stream_1.Transform {
    total;
    downloaded;
    rate;
    done;
    key;
    reporter;
    rateCounter;
    tick;
    tickCount;
    timeoutDuration;
    constructor(options) {
        super(options);
        this.total = options.fileSize;
        this.key = options.key;
        this.downloaded = 0;
        this.timeoutDuration = exports.TIMEOUT_DURATION;
        this.rate = 0;
        this.done = false;
        this.rateCounter = 0;
        this.tick = null;
        this.tickCount = 0;
        this.reporter = new downloadStatisticsReporterStream_1.default({ stream: this });
    }
    initTickTimeout = () => {
        this.tick = setTimeout(() => this.calcRate(), this.timeoutDuration);
    };
    clearTickTimeout = () => {
        if (this.tick) {
            clearTimeout(this.tick);
            this.tick = null;
        }
    };
    calcRate = () => {
        this.tickCount += 1;
        if (this.tickCount % 4 === 0) {
            this.rate = this.rateCounter;
            this.rateCounter = 0;
            this.tickCount = 0;
        }
        this.initTickTimeout();
    };
    _transform = (chunk, encoding, callback) => {
        if (!this.tick) {
            this.calcRate();
        }
        this.downloaded += chunk.length;
        this.rateCounter += chunk.length;
        callback(null, chunk);
    };
    _flush = (callback) => {
        this.clearTickTimeout();
        this.done = true;
        this.emit('end');
        callback();
    };
    _destroy = (error, callback) => {
        this.clearTickTimeout();
        this.done = true;
        this.emit('end');
        callback(error);
    };
}
exports.default = DownloadStatisticsStream;
//# sourceMappingURL=downloadStatisticsStream.js.map
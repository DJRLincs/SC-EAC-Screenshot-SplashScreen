"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Installer = exports.InstallerError = exports.patcherVersion = void 0;
const path_1 = __importDefault(require("path"));
const projectRoot = path_1.default.join(__dirname, '..');
// eslint-disable-next-line import/order, @typescript-eslint/no-var-requires
const CigDataPatcher = require('node-gyp-build')(projectRoot);
// eslint-disable-next-line @typescript-eslint/no-var-requires, import/no-unresolved, global-require
exports.patcherVersion = require('../package.json').config.changeList;
class InstallerError extends Error {
    bindingsError;
    constructor(message, bindingsError) {
        super(message);
        this.bindingsError = bindingsError;
    }
}
exports.InstallerError = InstallerError;
class Installer {
    installMode;
    installationPath;
    manifest;
    objectStore;
    options;
    cigDataPatcherInstaller = null;
    constructor(mode, installationPath, manifest, objectStore, options) {
        this.installMode = mode;
        this.installationPath = installationPath;
        this.manifest = manifest;
        this.objectStore = objectStore;
        this.options = options;
    }
    async install() {
        return new Promise((resolve, reject) => {
            this.cigDataPatcherInstaller = new CigDataPatcher.Installer(this.installMode, this.installationPath, this.manifest, this.objectStore, this.options, (error, result) => {
                this.cancel();
                if (error) {
                    reject(new InstallerError(error.message, error));
                }
                else {
                    resolve(result);
                }
            });
            if (!this.cigDataPatcherInstaller) {
                reject(new InstallerError('Failed to initialize installer'));
                return;
            }
            this.cigDataPatcherInstaller.setProgressCallback(this.options.progressCallback);
            if (this.options.logCallback) {
                this.cigDataPatcherInstaller.setLogCallback(this.options.logCallback);
            }
            this.cigDataPatcherInstaller.start();
        });
    }
    cancel() {
        this.cigDataPatcherInstaller?.cancel();
    }
    pause() {
        this.cigDataPatcherInstaller?.pause();
    }
    resume() {
        this.cigDataPatcherInstaller?.resume();
    }
    setOption(name, value) {
        this.cigDataPatcherInstaller?.setOption(name, value);
    }
    get state() {
        return this.cigDataPatcherInstaller?.getState() ?? null;
    }
    get mode() {
        return this.cigDataPatcherInstaller?.getMode() ?? null;
    }
    static createInstallationDirectory = async (directoryPath) => {
        try {
            CigDataPatcher.CreateInstallationDirectory(directoryPath);
            return true;
        }
        catch (e) {
            if (e instanceof Error) {
                throw new InstallerError(e.message, e);
            }
            else {
                throw new InstallerError('Unknown error occurred while creating installation directory');
            }
        }
    };
    static createEmptySparseFile = async (filePath, size) => {
        try {
            const result = CigDataPatcher.CreateEmptySparseFile(filePath, size);
            if (result.error) {
                throw new Error(result.error_message);
            }
            else {
                return true;
            }
        }
        catch (e) {
            if (e instanceof Error) {
                throw new InstallerError(e.message, e);
            }
            else {
                throw new InstallerError('Unknown error occurred while creating empty sparse file');
            }
        }
    };
}
exports.Installer = Installer;
//# sourceMappingURL=installer.js.map
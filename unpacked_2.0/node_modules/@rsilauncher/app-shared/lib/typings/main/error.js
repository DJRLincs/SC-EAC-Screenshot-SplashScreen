"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancelError = exports.FixPermissionError = exports.BasePackGenericError = exports.DownloadUnsuccessfullError = exports.PatcherGenericError = exports.BasePackP4kCorruptedError = exports.PatcherUnknownNetworkError = exports.RetrieveManifestError = exports.Pk4CorruptedError = exports.FileInUseError = exports.WritePermissionsError = exports.DiskFullError = exports.InvalidMDFileError = exports.InstallerError = exports.GenericError = exports.errorsCodes = exports.errorsNames = void 0;
const installer_1 = require("./installer");
exports.errorsNames = Object.assign(Object.assign({}, installer_1.InstallerErrorsNames), { ERR_UNKNOWN: 'GenericError', ERR_LOGOUT_FAILED: 'logoutFailed', ERR_DISPLAY_AGREEMENT: 'DisplayAgreementErr' });
//TO DO: Find codes for generic errors outside of installer
exports.errorsCodes = Object.assign(Object.assign({}, installer_1.InstallerErrorsCodes), { ERR_UNKNOWN: 'GenericError', ERR_LOGOUT_FAILED: 'logoutFailed', ERR_DISPLAY_AGREEMENT: 'DisplayAgreementErr' });
class GenericError extends Error {
    constructor({ message = 'Unknown Error', code = exports.errorsNames.ERR_UNKNOWN, payload = null, }) {
        super(message);
        Object.setPrototypeOf(this, GenericError.prototype);
        this.code = code;
        this.payload = payload;
    }
}
exports.GenericError = GenericError;
class InstallerError extends GenericError {
    constructor({ message, code = installer_1.InstallerErrorsCodes.ERR_INSTALL_UNKNOWN, payload, }) {
        super({ message, code, payload });
        Object.setPrototypeOf(this, InstallerError.prototype);
        this.code = code;
        this.payload = payload;
    }
}
exports.InstallerError = InstallerError;
class InvalidMDFileError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_INVALID_MD_FILE, payload });
        Object.setPrototypeOf(this, InvalidMDFileError.prototype);
    }
}
exports.InvalidMDFileError = InvalidMDFileError;
class DiskFullError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_DISK_FULL, payload });
        Object.setPrototypeOf(this, DiskFullError.prototype);
    }
}
exports.DiskFullError = DiskFullError;
class WritePermissionsError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_WRITE_PERMISSION, payload });
        Object.setPrototypeOf(this, WritePermissionsError.prototype);
    }
}
exports.WritePermissionsError = WritePermissionsError;
class FileInUseError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_FILE_IN_USE, payload });
        Object.setPrototypeOf(this, FileInUseError.prototype);
    }
}
exports.FileInUseError = FileInUseError;
class Pk4CorruptedError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_P4K_CORRUPTED, payload });
        Object.setPrototypeOf(this, Pk4CorruptedError.prototype);
    }
}
exports.Pk4CorruptedError = Pk4CorruptedError;
class RetrieveManifestError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_RETRIEVE_MANIFEST, payload });
        Object.setPrototypeOf(this, RetrieveManifestError.prototype);
    }
}
exports.RetrieveManifestError = RetrieveManifestError;
class PatcherUnknownNetworkError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_UNKNOWN_NETWORK_ERROR, payload });
        Object.setPrototypeOf(this, PatcherUnknownNetworkError.prototype);
    }
}
exports.PatcherUnknownNetworkError = PatcherUnknownNetworkError;
class BasePackP4kCorruptedError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_BASE_P4K_CORRUPTED, payload });
        Object.setPrototypeOf(this, BasePackP4kCorruptedError.prototype);
    }
}
exports.BasePackP4kCorruptedError = BasePackP4kCorruptedError;
class PatcherGenericError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_PATCHER_UNKNOWN, payload });
        Object.setPrototypeOf(this, PatcherGenericError.prototype);
    }
}
exports.PatcherGenericError = PatcherGenericError;
class DownloadUnsuccessfullError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_DOWNLOAD_UNSUCCESSFULL, payload });
        Object.setPrototypeOf(this, PatcherGenericError.prototype);
    }
}
exports.DownloadUnsuccessfullError = DownloadUnsuccessfullError;
class BasePackGenericError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_INIT_UNKNOWN, payload });
        Object.setPrototypeOf(this, BasePackGenericError.prototype);
    }
}
exports.BasePackGenericError = BasePackGenericError;
class FixPermissionError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_FIX_PERMISSIONS, payload });
        Object.setPrototypeOf(this, FixPermissionError.prototype);
    }
}
exports.FixPermissionError = FixPermissionError;
class CancelError extends InstallerError {
    constructor(message, payload) {
        super({ message, code: installer_1.InstallerErrorsCodes.ERR_CANCEL_FAIL, payload });
        Object.setPrototypeOf(this, FixPermissionError.prototype);
    }
}
exports.CancelError = CancelError;

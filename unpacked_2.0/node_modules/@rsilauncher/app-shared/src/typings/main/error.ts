import { InstallerErrorsCodes, InstallerErrorsNames, InstallerPayloadType, ValueOf } from './installer';

export const errorsNames = {
  ...InstallerErrorsNames,
  ERR_UNKNOWN: 'GenericError',
  ERR_LOGOUT_FAILED: 'logoutFailed',
  ERR_DISPLAY_AGREEMENT: 'DisplayAgreementErr',
};

//TO DO: Find codes for generic errors outside of installer
export const errorsCodes = {
  ...InstallerErrorsCodes,
  ERR_UNKNOWN: 'GenericError',
  ERR_LOGOUT_FAILED: 'logoutFailed',
  ERR_DISPLAY_AGREEMENT: 'DisplayAgreementErr',
};

export type ErrorCode = ValueOf<typeof errorsNames>;
export type InstallerErrorCode = ValueOf<typeof InstallerErrorsNames>;

export class GenericError<T = unknown> extends Error {
  code: ErrorCode;
  payload: T;

  constructor({
    message = 'Unknown Error',
    code = errorsNames.ERR_UNKNOWN,
    payload = null,
  }: {
    message: string;
    code: ErrorCode;
    payload: any;
  }) {
    super(message);
    Object.setPrototypeOf(this, GenericError.prototype);
    this.code = code;
    this.payload = payload;
  }
}

export class InstallerError extends GenericError<InstallerPayloadType> {
  code: ErrorCode;
  payload: InstallerPayloadType;

  constructor({
    message,
    code = InstallerErrorsCodes.ERR_INSTALL_UNKNOWN,
    payload,
  }: {
    message: string;
    code: InstallerErrorCode;
    payload: InstallerPayloadType;
  }) {
    super({ message, code, payload });
    Object.setPrototypeOf(this, InstallerError.prototype);
    this.code = code;
    this.payload = payload;
  }
}

export class InvalidMDFileError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_INVALID_MD_FILE, payload });
    Object.setPrototypeOf(this, InvalidMDFileError.prototype);
  }
}
export class DiskFullError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_DISK_FULL, payload });
    Object.setPrototypeOf(this, DiskFullError.prototype);
  }
}
export class WritePermissionsError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_WRITE_PERMISSION, payload });
    Object.setPrototypeOf(this, WritePermissionsError.prototype);
  }
}

export class FileInUseError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_FILE_IN_USE, payload });
    Object.setPrototypeOf(this, FileInUseError.prototype);
  }
}
export class Pk4CorruptedError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_P4K_CORRUPTED, payload });
    Object.setPrototypeOf(this, Pk4CorruptedError.prototype);
  }
}

export class RetrieveManifestError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_RETRIEVE_MANIFEST, payload });
    Object.setPrototypeOf(this, RetrieveManifestError.prototype);
  }
}

export class PatcherUnknownNetworkError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_UNKNOWN_NETWORK_ERROR, payload });
    Object.setPrototypeOf(this, PatcherUnknownNetworkError.prototype);
  }
}

export class BasePackP4kCorruptedError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_BASE_P4K_CORRUPTED, payload });
    Object.setPrototypeOf(this, BasePackP4kCorruptedError.prototype);
  }
}

export class PatcherGenericError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_PATCHER_UNKNOWN, payload });
    Object.setPrototypeOf(this, PatcherGenericError.prototype);
  }
}

export class DownloadUnsuccessfullError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_DOWNLOAD_UNSUCCESSFULL, payload });
    Object.setPrototypeOf(this, PatcherGenericError.prototype);
  }
}

export class BasePackGenericError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_INIT_UNKNOWN, payload });
    Object.setPrototypeOf(this, BasePackGenericError.prototype);
  }
}

export class FixPermissionError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_FIX_PERMISSIONS, payload });
    Object.setPrototypeOf(this, FixPermissionError.prototype);
  }
}

export class CancelError extends InstallerError {
  constructor(message: string, payload: InstallerPayloadType) {
    super({ message, code: InstallerErrorsCodes.ERR_CANCEL_FAIL, payload });
    Object.setPrototypeOf(this, FixPermissionError.prototype);
  }
}

import { GameChannelData } from './library';
import { InstallerErrorCode } from './error';

export type ValueOf<T> = T[keyof T];
export interface DownloadInfos {
  phase: string;
  info: {
    downloaded: number;
    speed: number;
    total: number;
    filesDone: number;
    filesTotal: number;
  };
}

export enum InstallationType {
  INSTALL = 'install',
  VERIFY = 'verify',
  UPDATE = 'update',
}

export enum InstallationStatus {
  WAITING = 'waiting',
  CANCELLING = 'cancelling',
  IN_PROGRESS = 'in-progress',
  PAUSED = 'paused',
  COMPLETED = 'completed',
  ERROR = 'error',
}

export interface InstallationInfoProgress {
  currentPhase: string;
  showProgress: boolean;
  progressUndeterminate: boolean;
  downloaded: number;
  total: number;
  percentage: number;
  filesDone: number;
  filesTotal: number;
  isPausable: boolean;
  isPaused: boolean;
  speed: string;
}

export interface InstallGameInfo {
  gameId: string;
  gameName: string;
  channelId: string;
  channelName: string;
  version: number;
  versionLabel: string;
  platformId: string;
  platformURL: string;
  servicesEndpoint: string;
  universeHost: string;
  universePort: number;
  executable: string;
  installDir: string;
  launchOptions: string;
  network: object;
  manifest: {
    url: string;
    signatures: string;
  };
  p4kBase: {
    url: string;
    signatures: string;
  };
  p4kBaseVerificationFile: {
    url: string;
    signatures: string;
  };
  objects: {
    url: string;
    signatures: string;
  };
  libraryFolder: string;
  forcePatcher: boolean;
  verify: boolean;
}

export interface InstallSuccessData extends InstallGameInfo {
  isInitialDownload: boolean;
  startTime: number;
  endTime: number;
  lastPeriodTime: number;
  lastPeriodSize: number;
  lastSpeed: number;
  manifest: {
    url: string;
    signatures: string;
    size: number | null;
  };
  looseFiles: {
    files: number | null;
    size: number | null;
  };
  objectFiles: {
    files: number | null;
    size: number | null;
  };
}

export const PatcherErrorsNames = {
  ERR_DISK_FULL: 'DiskFullError',
  ERR_WRITE_PERMISSION: 'WritePermissionError',
  ERR_FILE_IN_USE: 'FileInUseError',
  ERR_RETRIEVE_MANIFEST: 'RetrieveManifestError',
  ERR_P4K_CORRUPTED: 'P4kCorruptedError',
  ERR_BASE_P4K_CORRUPTED: 'BaseP4kCorruptedError',
  ERR_UNKNOWN_NETWORK_ERROR: 'UnknownNetworkError',
  ERR_PATCHER_UNKNOWN: 'GenericPatchInstallerError',
  ERR_DOWNLOAD_UNSUCCESSFULL: 'DownloadUnsuccessfullError',
};

export const InitialDownloadErrorsNames = {
  ERR_INVALID_MD_FILE: 'InvalidMDFileError',
  ERR_INIT_UNKNOWN: 'GenericInitialDownloadError',
};

export const InstallerErrorsNames = {
  ...PatcherErrorsNames,
  ...InitialDownloadErrorsNames,
  ERR_INSTALL_UNKNOWN: 'GenericInstallerError',
  ERR_FIX_PERMISSIONS: 'FixPermissionsError',
  ERR_CANCEL_FAIL: 'CancelFailError',
};

export const PatcherErrorsCodes = {
  ERR_DISK_FULL: '5000',
  ERR_WRITE_PERMISSION: '5001',
  ERR_FILE_IN_USE: '5002',
  ERR_RETRIEVE_MANIFEST: '5003',
  ERR_P4K_CORRUPTED: '5004',
  ERR_UNKNOWN_NETWORK_ERROR: '5005',
  ERR_BASE_P4K_CORRUPTED: '5006',
  ERR_PATCHER_UNKNOWN: '5007',
  ERR_DOWNLOAD_UNSUCCESSFULL: '5008',
};

export const InitialDownloadErrorsCodes = {
  ERR_INIT_UNKNOWN: '3000',
  ERR_INVALID_MD_FILE: '3001',
};

export const InstallerErrorsCodes = {
  ...PatcherErrorsCodes,
  ...InitialDownloadErrorsCodes,
  ERR_INSTALL_UNKNOWN: '2000',
  ERR_FIX_PERMISSIONS: '2001',
  ERR_CANCEL_FAIL: '2002',
};

export interface InstallerPayloadType extends GameChannelData {
  error: unknown;
}

export type InstallerErrorsObject = {
  code: InstallerErrorCode;
  message: string;
  payload: InstallerPayloadType;
};

export enum InstallerOptions {
  ConcurrentTransfers = 'concurrentTransfers',
  MaximumDownloadBandwidth = 'maximumDownloadBandwidth',
  MaximumTransfersInFlight = 'maximumTransfersInFlight',
  RetriesPerFile = 'retriesPerFile',
}

export type DownloadOptionsData = {
  name: InstallerOptions;
  value: number;
};

export type InstallerOptionsState = {
  [key in InstallerOptions]?: number;
};

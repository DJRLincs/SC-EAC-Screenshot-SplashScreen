const fs = require('fs');
const path = require('path');

const srcDir = path.join(__dirname, '..', 'src');
const destDir = path.join(__dirname, '..', 'dist');
const languages = fs.readdirSync(srcDir, { withFileTypes: true });
const locales = {};

if (!fs.existsSync(destDir)) {
  fs.mkdirSync(destDir);
}

languages.forEach((language) => {
  if (language.isDirectory()) {
    const { name: lng } = language;
    locales[lng] = {};
    const namespaces = fs.readdirSync(path.join(srcDir, language.name));
    namespaces.forEach((namespace) => {
      const { name: ns, ext } = path.parse(namespace);
      if (ext === '.json') {
        locales[lng][ns] = JSON.parse(fs.readFileSync(path.join(srcDir, language.name, namespace)));
      }
    });
  }
});

// CJS exports
const js = `${Object.entries(locales)
  .map(([lng, locale]) => [`const ${lng} = ${JSON.stringify(locale)};`, `exports.${lng} = ${lng};`].join('\n'))
  .join('\n')}
const locales = { ${Object.keys(locales).join(', ')} };
exports.locales = locales;
exports.default = locales;`;

// ES Module exports
const es = `${Object.entries(locales)
  .map(([lng, locale]) => `export const ${lng} = ${JSON.stringify(locale)};`)
  .join('\n')}
export const locales = { ${Object.keys(locales).join(', ')} };
export default locales;`;

// Crude TS definition export (Locale type could use some work, but it's temporary so no need)
const ts = `type Locale = Record<string, any>;
type LocaleCode = '${Object.keys(locales).join("' | '")}';
type Locales = Record<LocaleCode, Locale>;
${Object.keys(locales)
  .map((lng) => `export const ${lng}: Locale;`)
  .join('\n')}
export const locales: Locales;
export default locales;`;

fs.writeFileSync(path.join(destDir, 'index.js'), js);
fs.writeFileSync(path.join(destDir, 'index.es.js'), es);
fs.writeFileSync(path.join(destDir, 'index.d.ts'), ts);

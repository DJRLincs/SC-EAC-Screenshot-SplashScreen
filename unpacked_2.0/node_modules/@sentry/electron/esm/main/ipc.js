import { captureEvent, configureScope, Scope } from '@sentry/core';
import { logger, SentryError } from '@sentry/utils';
import { app, ipcMain, protocol } from 'electron';
import { IPCChannel, IPCMode, mergeEvents, PROTOCOL_SCHEME } from '../common';
import { supportsFullProtocol, whenAppReady } from './electron-normalize';
/**
 * Handle events from the renderer processes
 */
export function handleEvent(options, jsonEvent, contents) {
    var _a;
    let event;
    try {
        event = JSON.parse(jsonEvent);
    }
    catch (_b) {
        logger.warn('sentry-electron received an invalid event message');
        return;
    }
    const process = contents ? ((_a = options === null || options === void 0 ? void 0 : options.getRendererName) === null || _a === void 0 ? void 0 : _a.call(options, contents)) || 'renderer' : 'renderer';
    captureEvent(mergeEvents(event, { tags: { 'event.process': process } }));
}
/** Is object defined and has keys */
function hasKeys(obj) {
    return obj != undefined && Object.keys(obj).length > 0;
}
/**
 * Handle scope updates from renderer processes
 */
export function handleScope(options, jsonScope) {
    let rendererScope;
    try {
        rendererScope = JSON.parse(jsonScope);
    }
    catch (_a) {
        logger.warn('sentry-electron received an invalid scope message');
        return;
    }
    const sentScope = Scope.clone(rendererScope);
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    configureScope((scope) => {
        if (hasKeys(sentScope._user)) {
            scope.setUser(sentScope._user);
        }
        if (hasKeys(sentScope._tags)) {
            scope.setTags(sentScope._tags);
        }
        if (hasKeys(sentScope._extra)) {
            scope.setExtras(sentScope._extra);
        }
        for (const attachment of sentScope._attachments || []) {
            scope.addAttachment(attachment);
        }
        const breadcrumb = sentScope._breadcrumbs.pop();
        if (breadcrumb) {
            scope.addBreadcrumb(breadcrumb, (options === null || options === void 0 ? void 0 : options.maxBreadcrumbs) || 100);
        }
    });
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
}
/** Enables Electron protocol handling */
function configureProtocol(options) {
    if (app.isReady()) {
        throw new SentryError("Sentry SDK should be initialized before the Electron app 'ready' event is fired");
    }
    protocol.registerSchemesAsPrivileged([
        {
            scheme: PROTOCOL_SCHEME,
            privileges: { bypassCSP: true, corsEnabled: true, supportFetchAPI: true },
        },
    ]);
    whenAppReady
        .then(() => {
        for (const sesh of options.getSessions()) {
            sesh.protocol.registerStringProtocol(PROTOCOL_SCHEME, (request, callback) => {
                var _a, _b;
                const data = (_b = (_a = request.uploadData) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.bytes.toString();
                if (request.url.startsWith(`${PROTOCOL_SCHEME}://${IPCChannel.EVENT}`) && data) {
                    handleEvent(options, data);
                }
                else if (request.url.startsWith(`${PROTOCOL_SCHEME}://${IPCChannel.SCOPE}`) && data) {
                    handleScope(options, data);
                }
                callback('');
            });
        }
    })
        .catch((error) => logger.error(error));
}
/**
 * Hooks IPC for communication with the renderer processes
 */
function configureClassic(options) {
    ipcMain.on(IPCChannel.EVENT, ({ sender }, jsonEvent) => handleEvent(options, jsonEvent, sender));
    ipcMain.on(IPCChannel.SCOPE, (_, jsonScope) => handleScope(options, jsonScope));
}
/** Sets up communication channels with the renderer */
export function configureIPC(options) {
    if (!supportsFullProtocol() && options.ipcMode === IPCMode.Protocol) {
        throw new SentryError('IPCMode.Protocol is only supported in Electron >= v5');
    }
    // eslint-disable-next-line no-bitwise
    if (supportsFullProtocol() && (options.ipcMode & IPCMode.Protocol) > 0) {
        configureProtocol(options);
    }
    // eslint-disable-next-line no-bitwise
    if ((options.ipcMode & IPCMode.Classic) > 0) {
        configureClassic(options);
    }
}
//# sourceMappingURL=ipc.js.map